<<<<<<< HEAD
﻿## git pull 다른 브랜치 가져오기
1) 받아올 로컬 폴더 생성
2) git init
3) git remote add origin 해당git주소
4) git pull origin 가져올브랜치명
5) git branch -a 
: 브랜치 상태 확인하기
$ git branch -a
* master
  remotes/origin/front_page
  remotes/origin/jungmin
  remotes/origin/macat_wd48
  remotes/origin/master
> 요 상태면 checkout 가능
6) git checkout 가길원하는브랜치명
7) 변경됨을 확인

git config core.quotepath false
: 한글 인코딩

############ 쌩 기초 ############
## git 기초 http://wiki.sys4u.co.kr/pages/viewpage.action?pageId=7766499
## merge, fetch http://wiki.sys4u.co.kr/pages/viewpage.action?pageId=7766780
1. repository 생성 및 push
1) Git을 호스팅 해주는 웹 서비스인 Github에 원격저장소를 생성
2) 로컬저장소 생성해서 프로젝트 공유
3) remote repository에 push

작업중인 프로젝트 push commit 하기
1) 프로젝트 선택 - 우클릭 - team - commit
: 커밋 목록 확인, 커밋 메세지 작성
(shift + enter : 커밋 메세지 작성 종료 명령, 그냥 엔터로 줄바꿈 됨)

2) 프로젝트 선택 - team - push branch <push할 브랜치명:기본값 master>
: 경로 등 확인 후 finish, 완료

2. Pull
1) 프로젝트 선택 > Team > Pull
: pull할 파일 comment 노출, ok - 동기화 완료

3. Cloning
다른사람이 Git에 올려놓은 예제 소스코드를 내 local repository에 복사해서 보는 방법에 대해 다룹니다.

1) 이클립스 메뉴 File > import > Git ( Projects from Git ) 선택 후 Next > Clone URI 선택 후 Next : "import projects from Git"
: uri - 복사하려는 프로젝트 주소 입력 > next
 Authentication은 public repository 인지 private repository 인지에 따라 필요할 수 있습니다. 
=======
## git pull 다른 브랜치 가져오기
1) 받아올 로컬 폴더 생성
2) git init
3) git remote add origin 해당git주소
4) git pull origin 가져올브랜치명
5) git branch -a 
: 브랜치 상태 확인하기
$ git branch -a
* master
  remotes/origin/front_page
  remotes/origin/jungmin
  remotes/origin/macat_wd48
  remotes/origin/master
> 요 상태면 checkout 가능
6) git checkout 가길원하는브랜치명
7) 변경됨을 확인

git config core.quotepath false
: 한글 인코딩

> git reset [--soft/mixed/hard] <TARGET_VERSION>

soft : index, work tree 둘다 유지합니다. 약간의 오타만 수정하여 다시 커밋하고 싶을때 유용합니다.
mixed : 미지정시 기본값, index는 취소 work tree만 유지합니다.
hard : index, tree 모두 제거 합니다

## git merge (출처 > https://wayhome25.github.io/git/2017/04/05/git-04-merge/)
TMI> alise g=git : g만 입력해도 git으로 찰떡같이 인식

1) B 브랜치를 A 브랜치로 병합(merge)할 때 (B => A)
$ git checkout A
$ git merge B

2) 병합(merge) 확인
❯ git log --branches --graph --decorate --oneline
*   d66cc18 (HEAD -> master) Merge branch 'exp'
|\
| * 7ba6cb1 (exp) 6
| * 019d8ce 5
| * d239731 4
| * 410316d 3
* | 2e6dadd 7
|/
* db667dd 2
* 932645b 1

3) B 브랜치를 삭제할 때
$ git branch -d B

*** 충돌
merge 과정에서 파일의 이름이 같으면 충돌이 발생한다
파일이 다르면 무조건 자동으로 합쳐준다
파일이 같아도 수정한 부분이 다르다면 자동으로 합쳐준다 (버전관리를 사용하는 정말 중요한 이유중의 하나)


4) 충돌이 생기면 아래와 같은 메시지가 뜬다
❯ git merge exp
Auto-merging common.txt
CONFLICT (content): Merge conflict in common.txt
Automatic merge failed; fix conflicts and then commit the result.
Deleted branch B (was d66cc18).

5) git status : 충돌이 일어난 파일을 찾을 수 있다
❯ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

	both modified:   common.txt

no changes added to commit (use "git add" and/or "git commit -a")

6) 충돌이 발생한 파일을 수정 :
개발자가 직접 둘 중에 어느 수정 사항을 반영할 것인지 판단하여 수정

ex) merge conflict 발생 후 common.txt 파일 상태
이 정보를 참고로해서 두개의 코드를 병합한 후에 특수기호들을 제거한다
수정 후 add, commit 진행하면 정상적으로 merge commit이 진행된다

❯ vim common.txt
  1 function b
  2 <<<<<<< HEAD        # 현재 checkout 한 브랜치의 상태
  3 fucntion a(master)  
  4 =======             # 구분자 ====================
  5 fucntion a(exp)      
  6 >>>>>>> exp         # 병합하려는 대상인 exp 브랜치의 상태
  7
  8 function c
>>>>>>> da2809c8b0bf1620c9669905ac8ce0033d9fd135
